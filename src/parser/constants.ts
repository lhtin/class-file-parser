const CLASS_ACCESS_FLAGS = {
  ACC_PUBLIC: {
    value: 0x0001,
    name: 'public',
    desc: 'Declared public; may be accessed from outside its package.',
  },
  /* for InnerClasses */
  ACC_PRIVATE: {
    value: 0x0002,
    name: 'private',
    desc: 'Marked private in source.'
  },
  ACC_PROTECTED: {
    value: 0x004,
    name: 'protected',
    desc: 'Marked protected in source.'
  },
  ACC_STATIC: {
    value: 0x008,
    name: 'static',
    desc: 'Marked or implicitly static in source.',
  },
  /* end */
  ACC_FINAL: {
    value: 0x0010,
    name: 'final',
    desc: 'Declared final; no subclasses allowed.',
  },
  ACC_SUPER: {
    value: 0x0020,
    name: '',
    desc: 'Treat superclass methods specially when invoked by the invokespecial instruction.',
  },
  ACC_INTERFACE: {
    value: 0x0200,
    name: 'interface',
    desc: 'Is an interface, not a class.',
  },
  ACC_ABSTRACT: {
    value: 0x0400,
    name: 'abstract',
    desc: 'Declared abstract; must not be instantiated.',
  },
  ACC_SYNTHETIC: {
    value: 0x1000,
    name: 'synthetic',
    desc: 'Declared synthetic; not present in the source code.',
  },
  ACC_ANNOTATION: {
    value: 0x2000,
    name: 'annotation',
    desc: 'Declared as an annotation type.',
  },
  ACC_ENUM: {
    value: 0x4000,
    name: 'enum',
    desc: 'Declared as an enum type.',
  },
  ACC_MODULE: {
    value: 0x8000,
    name: 'module',
    desc: 'Is a module, not a class or interface.',
  },
}
const FIELD_ACCESS_FLAGS = {
  ACC_PUBLIC: {
    value: 0x0001,
    name: 'public',
    desc: 'Declared public; may be accessed from outside its package.',
  },
  ACC_PRIVATE: {
    value: 0x0002,
    name: 'private',
    desc: 'Declared protected; may be accessed within subclasses.',
  },
  ACC_PROTECTED: {
    value: 0x0004,
    name: 'protected',
    desc: 'Declared private; accessible only within the defining class and other classes belonging to the same nest (ยง5.4.4).',
  },
  ACC_STATIC: {
    value: 0x0008,
    name: 'static',
    desc: 'Declared static.',
  },
  ACC_FINAL: {
    value: 0x0010,
    name: 'final',
    desc: 'Declared final; never directly assigned to after object construction (JLS ยง17.5).',
  },
  ACC_VOLATILE: {
    value: 0x0040,
    name: 'volatile',
    desc: 'Declared volatile; cannot be cached.',
  },
  ACC_TRANSIENT: {
    value: 0x0080,
    name: 'transient',
    desc: 'Declared transient; not written or read by a persistent object manager.',
  },
  ACC_SYNTHETIC: {
    value: 0x1000,
    name: 'synthetic',
    desc: 'Declared synthetic; not present in the source code.',
  },
  ACC_ENUM: {
    value: 0x4000,
    name: 'enum',
    desc: 'Declared as an element of an enum.',
  },
}
const METHOD_ACCESS_FLAGS = {
  ACC_PUBLIC: {
    value: 0x0001,
    name: 'public',
    desc: 'Declared public; may be accessed from outside its package.',
  },
  ACC_PRIVATE: {
    value: 0x0002,
    name: 'private',
    desc: 'Declared protected; may be accessed within subclasses.',
  },
  ACC_PROTECTED: {
    value: 0x0004,
    name: 'protected',
    desc: 'Declared private; accessible only within the defining class and other classes belonging to the same nest (ยง5.4.4).',
  },
  ACC_STATIC: {
    value: 0x0008,
    name: 'static',
    desc: 'Declared static.',
  },
  ACC_FINAL: {
    value: 0x0010,
    name: 'final',
    desc: 'Declared final; must not be overridden (ยง5.4.5).',
  },
  ACC_SYNCHRONIZED: {
    value: 0x0020,
    name: 'synchronized',
    desc: 'Declared synchronized; invocation is wrapped by a monitor use.',
  },
  ACC_BRIDGE: {
    value: 0x0040,
    name: 'bridge',
    desc: 'A bridge method, generated by the compiler.',
  },
  ACC_VARARGS: {
    value: 0x0080,
    name: 'varargs',
    desc: 'Declared with variable number of arguments.',
  },
  ACC_NATIVE: {
    value: 0x0100,
    name: 'native',
    desc: 'Declared native; implemented in a language other than the Java programming language.',
  },
  ACC_ABSTRACT: {
    value: 0x0400,
    name: 'abstract',
    desc: 'Declared abstract; no implementation is provided.',
  },
  ACC_STRICT: {
    value: 0x0800,
    name: 'strictfp',
    desc: 'Declared strictfp; floating-point mode is FP- strict.',
  },
  ACC_SYNTHETIC: {
    value: 0x1000,
    name: 'synthetic',
    desc: 'Declared synthetic; not present in the source code.',
  },
}

const CONSTANT_TAG = {
  CONSTANT_Utf8: 1,
  CONSTANT_Integer: 3,
  CONSTANT_Float: 4,
  CONSTANT_Long: 5,
  CONSTANT_Double: 6,
  CONSTANT_Class: 7,
  CONSTANT_String: 8,
  CONSTANT_Fieldref: 9,
  CONSTANT_Methodref: 10,
  CONSTANT_InterfaceMethodref: 11,
  CONSTANT_NameAndType: 12,
  CONSTANT_MethodHandle: 15,
  CONSTANT_MethodType: 16,
  CONSTANT_Dynamic: 17,
  CONSTANT_InvokeDynamic: 18,
  CONSTANT_Module: 19,
  CONSTANT_Package: 20,
}

const CONSTANT_KIND = {
  [CONSTANT_TAG.CONSTANT_Utf8]: { name: 'Utf8' },
  [CONSTANT_TAG.CONSTANT_Integer]: { name: 'Integer' },
  [CONSTANT_TAG.CONSTANT_Float]: { name: 'Float' },
  [CONSTANT_TAG.CONSTANT_Long]: { name: 'Long' },
  [CONSTANT_TAG.CONSTANT_Double]: { name: 'Double' },
  [CONSTANT_TAG.CONSTANT_Class]: { name: 'Class' },
  [CONSTANT_TAG.CONSTANT_String]: { name: 'String' },
  [CONSTANT_TAG.CONSTANT_Fieldref]: { name: 'Fieldref' },
  [CONSTANT_TAG.CONSTANT_Methodref]: { name: 'Methodref' },
  [CONSTANT_TAG.CONSTANT_InterfaceMethodref]: { name: 'InterfaceMethodref' },
  [CONSTANT_TAG.CONSTANT_NameAndType]: { name: 'NameAndType' },
  [CONSTANT_TAG.CONSTANT_MethodHandle]: { name: 'MethodHandle' },
  [CONSTANT_TAG.CONSTANT_MethodType]: { name: 'MethodType' },
  [CONSTANT_TAG.CONSTANT_Dynamic]: { name: 'Dynamic' },
  [CONSTANT_TAG.CONSTANT_InvokeDynamic]: { name: 'InvokeDynamic' },
  [CONSTANT_TAG.CONSTANT_Module]: { name: 'Module' },
  [CONSTANT_TAG.CONSTANT_Package]: { name: 'Package' },
}

const REFERENCE_KIND = {
  1: { name: 'REF_getField', desc: 'getfield C.f:T' },
  2: { name: 'REF_getStatic', desc: 'getstatic C.f:T' },
  3: { name: 'REF_putField', desc: 'putfield C.f:T' },
  4: { name: 'REF_putStatic', desc: 'putstatic C.f:T' },
  5: { name: 'REF_invokeVirtual', desc: 'invokevirtual C.m:(A*)T' },
  6: { name: 'REF_invokeStatic', desc: 'invokestatic C.m:(A*)T' },
  7: { name: 'REF_invokeSpecial', desc: 'invokespecial C.m:(A*)T' },
  8: {
    name: 'REF_newInvokeSpecial',
    desc: 'new C; dup; invokespecial C.<init>:(A*)V',
  },
  9: { name: 'REF_invokeInterface', desc: 'invokeinterface C.m:(A*)T' },
}

export {
  CLASS_ACCESS_FLAGS,
  CONSTANT_KIND,
  FIELD_ACCESS_FLAGS,
  METHOD_ACCESS_FLAGS,
  REFERENCE_KIND,
  CONSTANT_TAG
}
